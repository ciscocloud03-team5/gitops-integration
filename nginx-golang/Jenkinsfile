pipeline {
    agent {
        kubernetes {
            cloud 'team5-eks'
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              serviceAccountName: jenkins-admin
              containers:
              - name: proxy
                image: nginx
                ports:
                - containerPort: 80
                volumeMounts:
                - name: nginx-config
                  mountPath: /etc/nginx/conf.d/default.conf
                  subPath: nginx.conf
                  readOnly: true
                dependsOn:
                - name: backend
              - name: backend
                image: your-backend-image:tag
                ports:
                - containerPort: 8080
                # Add any additional configuration or environment variables here
              volumes:
              - name: nginx-config
                configMap:
                  name: nginx-configmap
            """
        }
    }

    environment {
        APP_NAME = "nginx-golang" // 애플리케이션 이름
        RELEASE = "1.18" // 릴리즈 버전
        DOCKER_USER = "spear77" // Docker Hub 사용자 이름
        DOCKERHUB_CREDENTIALS = credentials('CJH_Docker_credential') // Jenkins Credentials에 저장된 Docker Hub 자격증명 ID
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}" // 이미지 이름
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}" // 이미지 태그
    }

    stages {
        stage("Checkout from SCM") { // 소스 코드 관리(SCM)에서 체크아웃 단계
            steps {
                script {
                 
                    sh 'pwd'
                    sh 'ls -al'
                    sh 'ls -al nginx-golang'
                    git credentialsId: 'CJH_Docker_credential', // GitHub 자격증명 사용
                        url: 'https://github.com/ciscocloud03-team5/gitops-integration.git', // GitHub 리포지토리 URL
                        branch: 'cjh' // 브랜치 이름
                    sh 'ls -al'
                    sh 'ls -al nginx-golang'
                    
                }
            }
        }


        stage('Run Tests') { // 테스트 실행 단계
            steps {
                container('python') {
                    script {
                        dir('/home/jenkins/agent/workspace/nginx-golang/nginx-golang') { // 작업 디렉토리 설정
                            sh 'pwd'
                            sh 'ls -al'
                            sh 'go test ./...' // 모든 테스트 실행
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') { // Docker 이미지 빌드 및 푸시 단계
            steps {
                container('docker') {
                    script {
                        dir('/home/jenkins/agent/workspace/nginx-golang/nginx-golang') { // 작업 디렉토리 설정
                            sh 'docker build --no-cache -t ${IMAGE_NAME}:${IMAGE_TAG} .' // Docker 이미지 빌드
                            sh 'docker build --no-cache -t ${IMAGE_NAME}:latest .' // Docker 이미지 빌드(latest 태그)
                            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin' // Docker 로그인
                            sh 'docker push ${IMAGE_NAME}:${IMAGE_TAG}' // Docker 이미지 푸시
                            sh 'docker push ${IMAGE_NAME}:latest' // Docker 이미지 푸시(latest 태그)
                        }
                    }
                }
            }
        }

        stage("Trigger CD Pipeline") {
            steps {
                script {
                    build job: 'gitops-test-golang', parameters: [
                        string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}")
                    ]
                }
            }
       }
    }
}



















}
